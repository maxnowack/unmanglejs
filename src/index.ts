import { parse } from 'acorn'
import { generate } from 'astring'
import phonetic from 'phonetic'
import * as walk from 'acorn-walk'
import { findLastIndex } from 'lodash'

const reservedWords = [
  "abstract",
  "arguments",
  "await",
  "boolean",
  "break",
  "byte",
  "case",
  "catch",
  "char",
  "class",
  "const",
  "continue",
  "debugger",
  "default",
  "delete",
  "do",
  "double",
  "else",
  "enum",
  "eval",
  "export",
  "extends",
  "false",
  "final",
  "finally",
  "float",
  "for",
  "function",
  "goto",
  "if",
  "implements",
  "import",
  "in",
  "instanceof",
  "int",
  "interface",
  "let",
  "long",
  "native",
  "new",
  "null",
  "package",
  "private",
  "protected",
  "public",
  "return",
  "short",
  "static",
  "super",
  "switch",
  "synchronized",
  "this",
  "throw",
  "throws",
  "transient",
  "true",
  "try",
  "typeof",
  "var",
  "void",
  "volatile",
  "while",
  "with",
  "yield",
  "Array",
  "Date",
  "eval",
  "function",
  "hasOwnProperty",
  "Infinity",
  "isFinite",
  "isNaN",
  "isPrototypeOf",
  "length",
  "Math",
  "NaN",
  "name",
  "Number",
  "Object",
  "prototype",
  "String",
  "toString",
  "undefined",
  "valueOf",
  "alert",
  "all",
  "anchor",
  "anchors",
  "area",
  "assign",
  "blur",
  "button",
  "checkbox",
  "clearInterval",
  "clearTimeout",
  "clientInformation",
  "close",
  "closed",
  "confirm",
  "constructor",
  "crypto",
  "decodeURI",
  "decodeURIComponent",
  "defaultStatus",
  "document",
  "element",
  "elements",
  "embed",
  "embeds",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "event",
  "fileUpload",
  "focus",
  "form",
  "forms",
  "frame",
  "innerHeight",
  "innerWidth",
  "layer",
  "layers",
  "link",
  "location",
  "mimeTypes",
  "navigate",
  "navigator",
  "frames",
  "frameRate",
  "hidden",
  "history",
  "image",
  "images",
  "offscreenBuffering",
  "open",
  "opener",
  "option",
  "outerHeight",
  "outerWidth",
  "packages",
  "pageXOffset",
  "pageYOffset",
  "parent",
  "parseFloat",
  "parseInt",
  "password",
  "pkcs11",
  "plugin",
  "prompt",
  "propertyIsEnum",
  "radio",
  "reset",
  "screenX",
  "screenY",
  "scroll",
  "secure",
  "select",
  "self",
  "setInterval",
  "setTimeout",
  "status",
  "submit",
  "taint",
  "text",
  "textarea",
  "top",
  "unescape",
  "untaint",
  "window",
  "abstract",
  "boolean",
  "byte",
  "char",
  "double",
  "final",
  "float",
  "goto",
  "int",
  "long",
  "native",
  "short",
  "synchronized",
  "throws",
  "transient",
  "volatile"
]

interface CustomNode extends acorn.Node {
  name: string,
}

function getNewName(name: string, scope: string) {
  if (reservedWords.includes(name)) return name
  const id = JSON.stringify({ name, scope })
  return phonetic.generate({ seed: id, capFirst: false })
}
function getTreePath(tree: acorn.Node[]) {
  return tree.map(node => node.type).join('.')
}
function getScope(tree: acorn.Node[], scopeType: string) {
  const scopeIndex = findLastIndex(tree, node => node.type === scopeType)
  return tree.slice(0, scopeIndex + 1)
}

export default function unmangle(source: string) {
  const parsed = parse(source, {
    ecmaVersion: 12,
  })

  walk.fullAncestor(parsed, (n, ancestors: acorn.Node[]) => {
    const node = n as CustomNode
    if (node.type !== 'Identifier') return
    const scope = getScope(ancestors, 'BlockStatement')
    const newName = getNewName(node.name, getTreePath(scope))
    node.name = newName
  })

  return generate(parsed)
}
